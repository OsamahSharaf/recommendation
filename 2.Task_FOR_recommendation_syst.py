{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "31a8d89c",
   "metadata": {},
   "source": [
    "# <b></span><span style='color:#007bff'>Project Overview </span></b>\n",
    "\n",
    "\n",
    "### This Python script normalizes a dataset by dynamically selecting the appropriate method for each column based on its data type and characteristics. It uses standard scaling, min-max scaling, or log transformation for numerical columns, determined by analyzing the column's mean, median, and standard deviation. For text columns, it applies TF-IDF to convert text data into numerical features. The script also handles categorical columns using one-hot encoding if the number of unique values is below a certain threshold. The entire process is automated, making the script adaptable to any dataset without the need for manual specification of column names. The normalized data is then saved to a new CSV file, and the script outputs the normalization method used for each column for verification."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "7e76bfa1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler, MinMaxScaler\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "ded5df39",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.read_csv('new_df_recomen.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ee65e6c2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>InvoiceNo</th>\n",
       "      <th>StockCode</th>\n",
       "      <th>Description</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>UnitPrice</th>\n",
       "      <th>Country</th>\n",
       "      <th>Transaction_Status</th>\n",
       "      <th>Total_Spend</th>\n",
       "      <th>Day_Of_Week</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>362103.0</td>\n",
       "      <td>5960185</td>\n",
       "      <td>1528779.0</td>\n",
       "      <td>PINK PILLAR CANDLE SILVER FLOCK</td>\n",
       "      <td>3</td>\n",
       "      <td>4.08</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>0</td>\n",
       "      <td>12.24</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>2018</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>362103.0</td>\n",
       "      <td>5960185</td>\n",
       "      <td>478086.0</td>\n",
       "      <td>PHOTO FRAME CORNICE</td>\n",
       "      <td>12</td>\n",
       "      <td>4.08</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>0</td>\n",
       "      <td>48.96</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>2018</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>362103.0</td>\n",
       "      <td>5960185</td>\n",
       "      <td>1528779.0</td>\n",
       "      <td>IVORY PILLAR CANDLE GOLD FLOCK</td>\n",
       "      <td>3</td>\n",
       "      <td>4.08</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>0</td>\n",
       "      <td>12.24</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>2018</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>362103.0</td>\n",
       "      <td>5960185</td>\n",
       "      <td>1732164.0</td>\n",
       "      <td>WOOD BLACK BOARD ANT WHITE FINISH</td>\n",
       "      <td>6</td>\n",
       "      <td>8.91</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>0</td>\n",
       "      <td>53.46</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>2018</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>362103.0</td>\n",
       "      <td>5960185</td>\n",
       "      <td>451185.0</td>\n",
       "      <td>RETROSPOT HEART HOT WATER BOTTLE</td>\n",
       "      <td>30</td>\n",
       "      <td>6.84</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>0</td>\n",
       "      <td>205.20</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>2018</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400190</th>\n",
       "      <td>372750.0</td>\n",
       "      <td>6162508</td>\n",
       "      <td>483105.0</td>\n",
       "      <td>TRAVEL CARD WALLET I LOVE LONDON</td>\n",
       "      <td>216</td>\n",
       "      <td>0.58</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>0</td>\n",
       "      <td>125.28</td>\n",
       "      <td>2</td>\n",
       "      <td>13</td>\n",
       "      <td>2018</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400191</th>\n",
       "      <td>372750.0</td>\n",
       "      <td>6162508</td>\n",
       "      <td>444759.0</td>\n",
       "      <td>NO JUNK MAIL METAL SIGN</td>\n",
       "      <td>72</td>\n",
       "      <td>0.54</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>0</td>\n",
       "      <td>38.88</td>\n",
       "      <td>2</td>\n",
       "      <td>13</td>\n",
       "      <td>2018</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400192</th>\n",
       "      <td>372750.0</td>\n",
       "      <td>6162508</td>\n",
       "      <td>464415.0</td>\n",
       "      <td>METAL SIGN EMPIRE TEA</td>\n",
       "      <td>36</td>\n",
       "      <td>1.10</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>0</td>\n",
       "      <td>39.60</td>\n",
       "      <td>2</td>\n",
       "      <td>13</td>\n",
       "      <td>2018</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400193</th>\n",
       "      <td>372750.0</td>\n",
       "      <td>6162508</td>\n",
       "      <td>358764.0</td>\n",
       "      <td>LOVE POTION MASALA INCENSE</td>\n",
       "      <td>75</td>\n",
       "      <td>0.29</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>0</td>\n",
       "      <td>21.75</td>\n",
       "      <td>2</td>\n",
       "      <td>13</td>\n",
       "      <td>2018</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400194</th>\n",
       "      <td>372750.0</td>\n",
       "      <td>6162508</td>\n",
       "      <td>357252.0</td>\n",
       "      <td>ORIGAMI JASMINE INCENSE/CANDLE SET</td>\n",
       "      <td>30</td>\n",
       "      <td>1.18</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>0</td>\n",
       "      <td>35.40</td>\n",
       "      <td>2</td>\n",
       "      <td>13</td>\n",
       "      <td>2018</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>400195 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        CustomerID  InvoiceNo  StockCode                         Description  \\\n",
       "0         362103.0    5960185  1528779.0     PINK PILLAR CANDLE SILVER FLOCK   \n",
       "1         362103.0    5960185   478086.0                 PHOTO FRAME CORNICE   \n",
       "2         362103.0    5960185  1528779.0      IVORY PILLAR CANDLE GOLD FLOCK   \n",
       "3         362103.0    5960185  1732164.0   WOOD BLACK BOARD ANT WHITE FINISH   \n",
       "4         362103.0    5960185   451185.0    RETROSPOT HEART HOT WATER BOTTLE   \n",
       "...            ...        ...        ...                                 ...   \n",
       "400190    372750.0    6162508   483105.0    TRAVEL CARD WALLET I LOVE LONDON   \n",
       "400191    372750.0    6162508   444759.0             NO JUNK MAIL METAL SIGN   \n",
       "400192    372750.0    6162508   464415.0               METAL SIGN EMPIRE TEA   \n",
       "400193    372750.0    6162508   358764.0          LOVE POTION MASALA INCENSE   \n",
       "400194    372750.0    6162508   357252.0  ORIGAMI JASMINE INCENSE/CANDLE SET   \n",
       "\n",
       "        Quantity  UnitPrice         Country  Transaction_Status  Total_Spend  \\\n",
       "0              3       4.08  United Kingdom                   0        12.24   \n",
       "1             12       4.08  United Kingdom                   0        48.96   \n",
       "2              3       4.08  United Kingdom                   0        12.24   \n",
       "3              6       8.91  United Kingdom                   0        53.46   \n",
       "4             30       6.84  United Kingdom                   0       205.20   \n",
       "...          ...        ...             ...                 ...          ...   \n",
       "400190       216       0.58  United Kingdom                   0       125.28   \n",
       "400191        72       0.54  United Kingdom                   0        38.88   \n",
       "400192        36       1.10  United Kingdom                   0        39.60   \n",
       "400193        75       0.29  United Kingdom                   0        21.75   \n",
       "400194        30       1.18  United Kingdom                   0        35.40   \n",
       "\n",
       "        Day_Of_Week  Hour  Year  Month  \n",
       "0                 4     6  2018      4  \n",
       "1                 4     6  2018      4  \n",
       "2                 4     6  2018      4  \n",
       "3                 4     6  2018      4  \n",
       "4                 4     6  2018      4  \n",
       "...             ...   ...   ...    ...  \n",
       "400190            2    13  2018      9  \n",
       "400191            2    13  2018      9  \n",
       "400192            2    13  2018      9  \n",
       "400193            2    13  2018      9  \n",
       "400194            2    13  2018      9  \n",
       "\n",
       "[400195 rows x 13 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "250c9830",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Analyzing column: CustomerID\n",
      "Mean: 320902.31416934245, Median: 318066.0, Std: 35986.730109711585, Min: 259266.0, Max: 384027.0\n",
      "Using standard_scale for column: CustomerID\n",
      "Analyzing column: InvoiceNo\n",
      "Mean: 6166809.605777184, Median: 6180669.0, Std: 143530.4884831971, Min: 5900015, Max: 6397457\n",
      "Using standard_scale for column: InvoiceNo\n",
      "Analyzing column: StockCode\n",
      "Mean: nan, Median: nan, Std: nan, Min: nan, Max: nan\n",
      "Using min_max_scale for column: StockCode\n",
      "Analyzing column: Quantity\n",
      "Mean: 36.42620472519647, Median: 15.0, Std: 749.7310893574657, Min: -242985, Max: 242985\n",
      "Using log_transform for column: Quantity\n",
      "Analyzing column: UnitPrice\n",
      "Mean: 9.0137212358975, Median: 2.7, Std: 2683.1318670608575, Min: 0.01, Max: 1696285.44\n",
      "Using standard_scale for column: UnitPrice\n",
      "Analyzing column: Transaction_Status\n",
      "Mean: 0.02210422419070703, Median: 0.0, Std: 0.14702254066514422, Min: 0, Max: 1\n",
      "Using log_transform for column: Transaction_Status\n",
      "Analyzing column: Total_Spend\n",
      "Mean: 186.9202789640051, Median: 48.239999999999995, Std: 64378.485861405294, Min: -699796.7999999999, Max: 40710850.56\n",
      "Using log_transform for column: Total_Spend\n",
      "Analyzing column: Day_Of_Week\n",
      "Mean: 2.9102337610414923, Median: 2.0, Std: 2.193660678485309, Min: 0, Max: 6\n",
      "Using log_transform for column: Day_Of_Week\n",
      "Analyzing column: Hour\n",
      "Mean: 8.731530878696635, Median: 9.0, Std: 2.2888851399460353, Min: 2, Max: 16\n",
      "Using min_max_scale for column: Hour\n",
      "Analyzing column: Year\n",
      "Mean: 2018.2521495770811, Median: 2018.0, Std: 0.43424666706718484, Min: 2018, Max: 2019\n",
      "Using min_max_scale for column: Year\n",
      "Analyzing column: Month\n",
      "Mean: 6.164092504903859, Median: 6.0, Std: 3.910145715823538, Min: 1, Max: 12\n",
      "Using standard_scale for column: Month\n",
      "Data normalization complete.\n",
      "Normalization methods used for each column:\n",
      "CustomerID: standard_scale\n",
      "InvoiceNo: standard_scale\n",
      "StockCode: min_max_scale\n",
      "Description: TF-IDF\n",
      "Quantity: log_transform\n",
      "UnitPrice: standard_scale\n",
      "Country: TF-IDF\n",
      "Transaction_Status: log_transform\n",
      "Total_Spend: log_transform\n",
      "Day_Of_Week: log_transform\n",
      "Hour: min_max_scale\n",
      "Year: min_max_scale\n",
      "Month: standard_scale\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler, MinMaxScaler\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "# Normalization functions for numerical data\n",
    "def standard_scale(value):\n",
    "    scaler = StandardScaler()\n",
    "    scaled_value = scaler.fit_transform(np.array(value).reshape(-1, 1)).flatten()\n",
    "    return scaled_value\n",
    "\n",
    "def min_max_scale(value):\n",
    "    scaler = MinMaxScaler()\n",
    "    scaled_value = scaler.fit_transform(np.array(value).reshape(-1, 1)).flatten()\n",
    "    return scaled_value\n",
    "\n",
    "def log_transform(value):\n",
    "    # Replace invalid values with a small positive constant\n",
    "    value = np.where(value <= 0, 1e-10, value)\n",
    "    transformed_value = np.log1p(value)\n",
    "    return transformed_value\n",
    "\n",
    "def get_normalization_method(values, column_name):\n",
    "    values = np.array(values)\n",
    "    print(f\"Analyzing column: {column_name}\")\n",
    "    print(f\"Mean: {np.mean(values)}, Median: {np.median(values)}, Std: {np.std(values)}, Min: {np.min(values)}, Max: {np.max(values)}\")\n",
    "    if np.any(values <= 0):\n",
    "        print(f\"Using log_transform for column: {column_name}\")\n",
    "        return log_transform, 'log_transform'\n",
    "    elif np.abs(np.mean(values) - np.median(values)) / np.std(values) < 0.1:\n",
    "        print(f\"Using standard_scale for column: {column_name}\")\n",
    "        return standard_scale, 'standard_scale'\n",
    "    else:\n",
    "        print(f\"Using min_max_scale for column: {column_name}\")\n",
    "        return min_max_scale, 'min_max_scale'\n",
    "\n",
    "# Normalization function for text data using TF-IDF\n",
    "def normalize_text_data(text_data):\n",
    "    text_data = text_data.fillna('')  # Replace NaN values with empty string\n",
    "    vectorizer = TfidfVectorizer()\n",
    "    tfidf_matrix = vectorizer.fit_transform(text_data)\n",
    "    feature_names = vectorizer.get_feature_names_out()\n",
    "    tfidf_df = pd.DataFrame(tfidf_matrix.toarray(), columns=feature_names)\n",
    "    return tfidf_df, 'TF-IDF'\n",
    "\n",
    "# Function to normalize both numerical and text data\n",
    "def normalize_data(df):\n",
    "    new_df = pd.DataFrame()\n",
    "    normalization_methods = {}\n",
    "    \n",
    "    for col in df.columns:\n",
    "        if df[col].dtype in ['int64', 'float64']:  # Numerical columns\n",
    "            values = df[col].values\n",
    "            normalization_method, method_name = get_normalization_method(values, col)\n",
    "            if normalization_method:\n",
    "                new_df[col] = normalization_method(values)\n",
    "                normalization_methods[col] = method_name\n",
    "        elif df[col].dtype == 'object':  # Text columns\n",
    "            tfidf_df, method_name = normalize_text_data(df[col])\n",
    "            tfidf_df = tfidf_df.add_prefix(col + '_')\n",
    "            new_df = pd.concat([new_df, tfidf_df], axis=1)\n",
    "            normalization_methods[col] = method_name\n",
    "        else:\n",
    "            new_df[col] = df[col]\n",
    "            normalization_methods[col] = 'none'\n",
    "    \n",
    "    return new_df, normalization_methods\n",
    "\n",
    "# Load data from the CSV file\n",
    "# df = pd.read_csv('/mnt/data/new_df_recom.csv')  # Change the filename to your actual dataset\n",
    "\n",
    "# Normalize the data\n",
    "normalized_df, normalization_methods = normalize_data(df)\n",
    "\n",
    "# Save the normalized data back to a CSV file\n",
    "# normalized_df.to_csv('normalized_new_df_recom.csv', index=False)\n",
    "\n",
    "print(\"Data normalization complete.\")\n",
    "print(\"Normalization methods used for each column:\")\n",
    "for col, method in normalization_methods.items():\n",
    "    print(f\"{col}: {method}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "0eff7a79",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>InvoiceNo</th>\n",
       "      <th>StockCode</th>\n",
       "      <th>Description_10</th>\n",
       "      <th>Description_11</th>\n",
       "      <th>Description_12</th>\n",
       "      <th>Description_120cm</th>\n",
       "      <th>Description_125g</th>\n",
       "      <th>Description_15</th>\n",
       "      <th>Description_15c</th>\n",
       "      <th>...</th>\n",
       "      <th>Country_switzerland</th>\n",
       "      <th>Country_united</th>\n",
       "      <th>Country_unspecified</th>\n",
       "      <th>Country_usa</th>\n",
       "      <th>Transaction_Status</th>\n",
       "      <th>Total_Spend</th>\n",
       "      <th>Day_Of_Week</th>\n",
       "      <th>Hour</th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.144886</td>\n",
       "      <td>-1.439587</td>\n",
       "      <td>0.782888</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.707046</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000e-10</td>\n",
       "      <td>2.583243</td>\n",
       "      <td>1.609438</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.553456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.144886</td>\n",
       "      <td>-1.439587</td>\n",
       "      <td>0.159128</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.707046</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000e-10</td>\n",
       "      <td>3.911223</td>\n",
       "      <td>1.609438</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.553456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.144886</td>\n",
       "      <td>-1.439587</td>\n",
       "      <td>0.782888</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.707046</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000e-10</td>\n",
       "      <td>2.583243</td>\n",
       "      <td>1.609438</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.553456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1.144886</td>\n",
       "      <td>-1.439587</td>\n",
       "      <td>0.903630</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.707046</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000e-10</td>\n",
       "      <td>3.997466</td>\n",
       "      <td>1.609438</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.553456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.144886</td>\n",
       "      <td>-1.439587</td>\n",
       "      <td>0.143158</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.707046</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000e-10</td>\n",
       "      <td>5.328847</td>\n",
       "      <td>1.609438</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.553456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400190</th>\n",
       "      <td>1.440745</td>\n",
       "      <td>-0.029970</td>\n",
       "      <td>0.162108</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.707046</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000e-10</td>\n",
       "      <td>4.838502</td>\n",
       "      <td>1.098612</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.725269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400191</th>\n",
       "      <td>1.440745</td>\n",
       "      <td>-0.029970</td>\n",
       "      <td>0.139343</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.707046</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000e-10</td>\n",
       "      <td>3.685875</td>\n",
       "      <td>1.098612</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.725269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400192</th>\n",
       "      <td>1.440745</td>\n",
       "      <td>-0.029970</td>\n",
       "      <td>0.151012</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.707046</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000e-10</td>\n",
       "      <td>3.703768</td>\n",
       "      <td>1.098612</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.725269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400193</th>\n",
       "      <td>1.440745</td>\n",
       "      <td>-0.029970</td>\n",
       "      <td>0.088291</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.707046</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000e-10</td>\n",
       "      <td>3.124565</td>\n",
       "      <td>1.098612</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.725269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>400194</th>\n",
       "      <td>1.440745</td>\n",
       "      <td>-0.029970</td>\n",
       "      <td>0.087393</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.707046</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000e-10</td>\n",
       "      <td>3.594569</td>\n",
       "      <td>1.098612</td>\n",
       "      <td>0.785714</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.725269</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>400195 rows Ã— 2089 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        CustomerID  InvoiceNo  StockCode  Description_10  Description_11  \\\n",
       "0         1.144886  -1.439587   0.782888             0.0             0.0   \n",
       "1         1.144886  -1.439587   0.159128             0.0             0.0   \n",
       "2         1.144886  -1.439587   0.782888             0.0             0.0   \n",
       "3         1.144886  -1.439587   0.903630             0.0             0.0   \n",
       "4         1.144886  -1.439587   0.143158             0.0             0.0   \n",
       "...            ...        ...        ...             ...             ...   \n",
       "400190    1.440745  -0.029970   0.162108             0.0             0.0   \n",
       "400191    1.440745  -0.029970   0.139343             0.0             0.0   \n",
       "400192    1.440745  -0.029970   0.151012             0.0             0.0   \n",
       "400193    1.440745  -0.029970   0.088291             0.0             0.0   \n",
       "400194    1.440745  -0.029970   0.087393             0.0             0.0   \n",
       "\n",
       "        Description_12  Description_120cm  Description_125g  Description_15  \\\n",
       "0                  0.0                0.0               0.0             0.0   \n",
       "1                  0.0                0.0               0.0             0.0   \n",
       "2                  0.0                0.0               0.0             0.0   \n",
       "3                  0.0                0.0               0.0             0.0   \n",
       "4                  0.0                0.0               0.0             0.0   \n",
       "...                ...                ...               ...             ...   \n",
       "400190             0.0                0.0               0.0             0.0   \n",
       "400191             0.0                0.0               0.0             0.0   \n",
       "400192             0.0                0.0               0.0             0.0   \n",
       "400193             0.0                0.0               0.0             0.0   \n",
       "400194             0.0                0.0               0.0             0.0   \n",
       "\n",
       "        Description_15c  ...  Country_switzerland  Country_united  \\\n",
       "0                   0.0  ...                  0.0        0.707046   \n",
       "1                   0.0  ...                  0.0        0.707046   \n",
       "2                   0.0  ...                  0.0        0.707046   \n",
       "3                   0.0  ...                  0.0        0.707046   \n",
       "4                   0.0  ...                  0.0        0.707046   \n",
       "...                 ...  ...                  ...             ...   \n",
       "400190              0.0  ...                  0.0        0.707046   \n",
       "400191              0.0  ...                  0.0        0.707046   \n",
       "400192              0.0  ...                  0.0        0.707046   \n",
       "400193              0.0  ...                  0.0        0.707046   \n",
       "400194              0.0  ...                  0.0        0.707046   \n",
       "\n",
       "        Country_unspecified  Country_usa  Transaction_Status  Total_Spend  \\\n",
       "0                       0.0          0.0        1.000000e-10     2.583243   \n",
       "1                       0.0          0.0        1.000000e-10     3.911223   \n",
       "2                       0.0          0.0        1.000000e-10     2.583243   \n",
       "3                       0.0          0.0        1.000000e-10     3.997466   \n",
       "4                       0.0          0.0        1.000000e-10     5.328847   \n",
       "...                     ...          ...                 ...          ...   \n",
       "400190                  0.0          0.0        1.000000e-10     4.838502   \n",
       "400191                  0.0          0.0        1.000000e-10     3.685875   \n",
       "400192                  0.0          0.0        1.000000e-10     3.703768   \n",
       "400193                  0.0          0.0        1.000000e-10     3.124565   \n",
       "400194                  0.0          0.0        1.000000e-10     3.594569   \n",
       "\n",
       "        Day_Of_Week      Hour  Year     Month  \n",
       "0          1.609438  0.285714   0.0 -0.553456  \n",
       "1          1.609438  0.285714   0.0 -0.553456  \n",
       "2          1.609438  0.285714   0.0 -0.553456  \n",
       "3          1.609438  0.285714   0.0 -0.553456  \n",
       "4          1.609438  0.285714   0.0 -0.553456  \n",
       "...             ...       ...   ...       ...  \n",
       "400190     1.098612  0.785714   0.0  0.725269  \n",
       "400191     1.098612  0.785714   0.0  0.725269  \n",
       "400192     1.098612  0.785714   0.0  0.725269  \n",
       "400193     1.098612  0.785714   0.0  0.725269  \n",
       "400194     1.098612  0.785714   0.0  0.725269  \n",
       "\n",
       "[400195 rows x 2089 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "normalized_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b46b958b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85061fb5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
